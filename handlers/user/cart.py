import logging
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.inline.products_from_cart import product_markup, product_cb
from aiogram.utils.callback_data import CallbackData
from keyboards.default.markups import *
from aiogram.types.chat import ChatActions
from states import CheckoutState
from loader import dp, db, bot
from filters import IsUser
from .menu import cart
from aiogram.types import Message, Location, KeyboardButton

@dp.message_handler(IsUser(), text=cart)
async def process_cart(message: Message, state: FSMContext):

    cart_data = db.fetchall(
        'SELECT * FROM cart WHERE cid=?', (message.chat.id,))

    if len(cart_data) == 0:

        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')

    else:

        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        async with state.proxy() as data:
            data['products'] = {}

        order_cost = 0

        for _, idx, count_in_cart in cart_data:

            product = db.fetchone('SELECT * FROM products WHERE idx=?', (idx,))

            if product == None:

                db.query('DELETE FROM cart WHERE idx=?', (idx,))

            else:
                _, title, body, image, price, _ = product
                order_cost += price

                async with state.proxy() as data:
                    data['products'][idx] = [title, price, count_in_cart]

                markup = product_markup(idx, count_in_cart)
                text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price}‚ÇΩ.'

                await message.answer_photo(photo=image,
                                           caption=text,
                                           reply_markup=markup)

        if order_cost != 0:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add('üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')

            await message.answer('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é?',
                                 reply_markup=markup)


@dp.callback_query_handler(IsUser(), product_cb.filter(action='count'))
@dp.callback_query_handler(IsUser(), product_cb.filter(action='increase'))
@dp.callback_query_handler(IsUser(), product_cb.filter(action='decrease'))
async def product_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):

    idx = callback_data['id']
    action = callback_data['action']

    if 'count' == action:

        async with state.proxy() as data:

            if 'products' not in data.keys():

                await process_cart(query.message, state)

            else:

                await query.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - ' + data['products'][idx][2])

    else:

        async with state.proxy() as data:

            if 'products' not in data.keys():

                await process_cart(query.message, state)

            else:

                data['products'][idx][2] += 1 if 'increase' == action else -1
                count_in_cart = data['products'][idx][2]

                if count_in_cart == 0:

                    db.query('''DELETE FROM cart
                    WHERE cid = ? AND idx = ?''', (query.message.chat.id, idx))

                    await query.message.delete()
                else:

                    db.query('''UPDATE cart 
                    SET quantity = ? 
                    WHERE cid = ? AND idx = ?''', (count_in_cart, query.message.chat.id, idx))

                    await query.message.edit_reply_markup(product_markup(idx, count_in_cart))


@dp.message_handler(IsUser(), text='üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def process_checkout(message: Message, state: FSMContext):

    await CheckoutState.check_cart.set()
    await checkout(message, state)


async def checkout(message, state):
    answer = ''
    total_price = 0

    async with state.proxy() as data:

        for title, price, count_in_cart in data['products'].values():

            tp = count_in_cart * price
            answer += f'<b>{title}</b> * {count_in_cart}—à—Ç. = {tp}‚ÇΩ\n'
            total_price += tp

    await message.answer(f'{answer}\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price}‚ÇΩ.',
                         reply_markup=check_markup())


@dp.message_handler(IsUser(), lambda message: message.text not in [all_right_message, back_message], state=CheckoutState.check_cart)
async def process_check_cart_invalid(message: Message):
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.check_cart)
async def process_check_cart_back(message: Message, state: FSMContext):
    await state.finish()
    await process_cart(message, state)
#–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
async def check_name(data, message):
    if not data["name"]:
        await CheckoutState.name.set()
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.', reply_markup=back_markup())
        return False
    return True

async def check_address(data, message):
    if data["address"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç")
        markup.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å")
        await message.answer(f'–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –í—ã –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ —Å—é–¥–∞: {data["address"]}\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?', reply_markup=markup)
        await CheckoutState.choose_address.set()
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        location_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
        markup.add(location_button)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å.", reply_markup=markup)
        await CheckoutState.send_location_or_text.set()

async def check_mobile(data, message):
    if not data["mobile"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        phone_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        markup.add(phone_button)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", reply_markup=markup)
        await CheckoutState.send_contact_or_text.set()
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add("–ù–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π")
        markup.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å –∫—É—Ä—å–µ—Ä–æ–º: {data["mobile"]}\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–º –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.', reply_markup=markup)
        await CheckoutState.confirm_mobile.set()

@dp.message_handler(IsUser(), text=all_right_message, state=CheckoutState.check_cart)
async def process_check_cart_all_right(message: Message, state: FSMContext):
    user_data = db.fetchone("SELECT * FROM users WHERE cid=?", (message.chat.id,))
    async with state.proxy() as data:
        if user_data:
            data["name"] = user_data[6]
            data["address"] = user_data[3]
            data["mobile"] = user_data[5]

            if not await check_name(data, message): 
                return
            await check_address(data, message)
            await check_mobile(data, message)
        else:
            await CheckoutState.name.set()
            await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.', reply_markup=back_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(IsUser(), content_types=["text"], state=CheckoutState.send_contact_or_text)
async def process_user_mobile_from_text(message: Message, state: FSMContext):
    mobile = message.text
    db.query("UPDATE users SET mobile = ? WHERE cid = ?", (mobile, message.chat.id))
    await confirm(message)  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await CheckoutState.confirm.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message_handler(IsUser(), content_types=["contact"], state=CheckoutState.send_contact_or_text)
async def process_user_mobile_from_contact(message: Message, state: FSMContext):
    contact = message.contact
    mobile = contact.phone_number
    db.query("UPDATE users SET mobile = ? WHERE cid = ?", (mobile, message.chat.id))
    await confirm(message)  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await CheckoutState.confirm.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
@dp.message_handler(IsUser(), text=["–ù–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"], state=CheckoutState.confirm_mobile)
async def process_confirm_or_change_mobile(message: Message, state: FSMContext):
    if message.text == "–ù–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π":
        await confirm(message)
        await CheckoutState.confirm.set()
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        phone_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        markup.add(phone_button)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", reply_markup=markup)
        await CheckoutState.send_contact_or_text.set()

@dp.message_handler(IsUser(), content_types=["text"], state=CheckoutState.send_location_or_text)
async def process_user_address(message: Message, state: FSMContext):
    address = message.text
    db.query("UPDATE users SET address = ? WHERE cid = ?", (address, message.chat.id))
    await confirm(message)
    await CheckoutState.confirm.set()

@dp.message_handler(IsUser(), text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç", state=CheckoutState.choose_address)
async def process_use_same_address(message: Message, state: FSMContext):
    await confirm(message)
    await CheckoutState.confirm.set()

@dp.message_handler(IsUser(), text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å", state=CheckoutState.choose_address)
async def process_new_address(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
    await CheckoutState.send_location.set()

@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.name)
async def process_name_back(message: Message, state: FSMContext):
    await CheckoutState.check_cart.set()
    await checkout(message, state)
    
#–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Å—Ç—É—Å—Ç–≤–∏–∏ –≤ –±–∞–∑–µ –∞–¥—Ä–µ—Å–∞
@dp.message_handler(IsUser(), content_types=["location"], state=CheckoutState.send_location_or_text)
async def process_user_location_from_button(message: Message, state: FSMContext):
    user_location = message.location
    latitude = user_location.latitude
    longitude = user_location.longitude

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    coordinates = f"{latitude}, {longitude}"

    async with state.proxy() as data:
        data["coordinates"] = coordinates

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –∞–¥—Ä–µ—Å)
    db.query("UPDATE users SET coordinates = ? WHERE cid = ?", (coordinates, message.chat.id))

    await confirm(message)
    await CheckoutState.confirm.set()

#–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞
@dp.message_handler(IsUser(), content_types=["location"], state=CheckoutState.send_location)
async def process_user_location(message: Message, state: FSMContext):
    user_location = message.location
    latitude = user_location.latitude
    longitude = user_location.longitude

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    coordinates = f"{latitude}, {longitude}"

    async with state.proxy() as data:
        data["coordinates"] = coordinates

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.query("UPDATE users SET coordinates = ? WHERE cid = ?", (coordinates, message.chat.id))

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞–¥—Ä–µ—Å, –∫–æ–≥–¥–∞ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å

    await confirm(message)
    await CheckoutState.confirm.set()
##–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤—ã—à–µ –ø–∏—Å–∞–ª–∏ –º—ã –Ω–∏–∂–µ –ø–∏—Å–∞–ª–∏ –Ω–µ –º—ã 

@dp.message_handler(IsUser(), state=CheckoutState.name)
async def process_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        db.query("UPDATE users SET name = ? WHERE cid = ?", (message.text, message.chat.id))

        if "address" in data.keys():
            await confirm(message)
            await CheckoutState.confirm.set()
        else:
            await CheckoutState.next()
            await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞.', reply_markup=back_markup())

@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.address)
async def process_address_back(message: Message, state: FSMContext):

    async with state.proxy() as data:

        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å <b>' + data['name'] + '</b>?',
                             reply_markup=back_markup())

    await CheckoutState.name.set()


@dp.message_handler(IsUser(), state=CheckoutState.address)
async def process_address(message: Message, state: FSMContext):

    async with state.proxy() as data:
        data['address'] = message.text

    await confirm(message)
    await CheckoutState.next()


async def confirm(message):

    await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.',
                         reply_markup=confirm_markup())


@dp.message_handler(IsUser(), lambda message: message.text not in [confirm_message, back_message], state=CheckoutState.confirm)
async def process_confirm_invalid(message: Message):
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):

    await CheckoutState.address.set()

    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å —Å <b>' + data['address'] + '</b>?',
                             reply_markup=back_markup())
##–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤—ã—à–µ –ø–∏—Å–∞–ª–∏ –ù–ï –ú–´ –Ω–∏–∂–µ –ø–∏—Å–∞–ª–∏ –ú–´
#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders 
@dp.message_handler(IsUser(), text=confirm_message, state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    enough_money = True  # enough money on the balance sheet
    markup = ReplyKeyboardRemove()

    if enough_money:
        logging.info('Deal was made.')

        cid = message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ò–º—è –∏ –ê–¥—Ä–µ—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db.fetchone('SELECT name, address FROM users WHERE cid=?', (cid,))

        if not user_data:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=markup)
            await state.finish()
            return

        name, address = user_data

        products = [idx + '=' + str(quantity)
                    for idx, quantity in db.fetchall('''SELECT idx, quantity FROM cart WHERE cid=?''', (cid,))]  # idx=quantity

        db.query('INSERT INTO orders VALUES (?, ?, ?, ?)', (cid, name, address, ' '.join(products)))
        db.query('DELETE FROM cart WHERE cid=?', (cid,))

        await message.answer('–û–∫! –í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—É—Ç–∏ üöÄ\n–ò–º—è: <b>' + name + '</b>\n–ê–¥—Ä–µ—Å: <b>' + address + '</b>', reply_markup=markup)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!', reply_markup=markup)

    await state.finish()
